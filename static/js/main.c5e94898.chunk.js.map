{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","title","margin","spacing","topRow","display","height","justifyContent","alignItems","input","button","fontSize","backgroundColor","color","info","width","tableContainer","App","classes","useState","accessKey","setAccessKey","secretKey","setSecretKey","instances","setInstances","makeRequest","endpoint","data","a","requestOptions","method","headers","body","JSON","stringify","accessKeyId","secretAccessKey","fetch","response","json","Object","keys","length","instanceId","instanceIp","instance_id","instance_ip","console","log","className","TextField","size","id","label","variant","InputLabelProps","shrink","onChange","e","target","value","Button","onClick","getCurrentInfo","launchNewInstance","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","instance","terminateInstance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5e94898.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    margin: theme.spacing(1),\n  },\n  topRow: {\n    display: 'flex',\n    height: '75px',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  input: {\n    margin: theme.spacing(1),\n  },\n  button: {\n    fontSize: 8,\n    margin: theme.spacing(1),\n    backgroundColor: 'blue',\n    color: 'white',\n    '&:hover': {\n      backgroundColor: 'black'\n    }\n  },\n  info: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  tableContainer: {\n    width: '80%'\n  }\n}));\n\n\n\nfunction App() {\n\n  const classes = useStyles();\n\n  const [accessKey, setAccessKey] = useState('');\n  const [secretKey, setSecretKey] = useState('');\n  const [instances, setInstances] = useState('');\n\n  async function makeRequest(endpoint, data) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ accessKeyId: accessKey, secretAccessKey: secretKey, ...data})\n    };\n    const response = await fetch(`https://minecraftbackend.herokuapp.com/${endpoint}`, requestOptions);\n    return response.json();\n  }\n\n  async function getCurrentInfo() {\n    const data = await makeRequest('instances', {});\n    setInstances(data);\n  }\n\n  async function launchNewInstance() {\n    if(Object.keys(instances).length == 0) {\n      const data = await makeRequest('start-mc', {});\n    }\n  }\n\n  async function terminateInstance(instanceId, instanceIp) {\n    const data = await makeRequest('terminate', {instance_id: instanceId, instance_ip: instanceIp});\n    console.log(data);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className={classes.title}> \n        Riley/Aquinn Minecraft Server Tool Website\n      </div>\n      <div className={classes.topRow}> \n        <TextField \n          size='small'\n          className={classes.input}\n          id=\"outlined-basic\" \n          label=\"AccessKey\" \n          variant=\"outlined\" \n          InputLabelProps={{\n              shrink: true,\n          }}\n          onChange={e => setAccessKey(e.target.value)}\n        />\n        <TextField \n          size='small'\n          className={classes.input}\n          id=\"outlined-basic\" \n          label=\"SecretKey\" \n          variant=\"outlined\" \n          InputLabelProps={{\n              shrink: true,\n          }}\n          onChange={e => setSecretKey(e.target.value)}\n        />\n        <Button size='small' className={classes.button} onClick={() => getCurrentInfo()}>Get/Refresh</Button> \n      </div>\n      {instances ? \n      <>\n        {Object.keys(instances).length === 0 ? <Button size='small' className={classes.button} onClick={() => launchNewInstance()}>Launch New Instance</Button> : null}\n        <div className={classes.info}>\n          <TableContainer className={classes.tableContainer} component={Paper}>\n            <Table >\n              <TableHead>\n                <TableRow>\n                  <TableCell width=\"20%\">ID</TableCell>\n                  <TableCell width=\"20%\">IP</TableCell>\n                  <TableCell width=\"20%\">Launch Time</TableCell>\n                  <TableCell width=\"10%\">Type</TableCell>\n                  <TableCell width=\"15%\">Backup</TableCell>\n                  <TableCell width=\"15%\">Stop</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {Object.keys(instances).map(instance => \n                  <TableRow key={instance}>\n                    <TableCell width=\"20%\">{instance}</TableCell>\n                    <TableCell width=\"20%\">{instances[instance]['Public IP']}</TableCell>\n                    <TableCell width=\"20%\">{instances[instance]['Launch Time']}</TableCell>\n                    <TableCell width=\"10%\">{instances[instance]['Type']}</TableCell>\n                    <TableCell width=\"15%\">\n                      <Button size='large' className={classes.button} onClick={() => {}}>Backup</Button>\n                    </TableCell>\n                    <TableCell width=\"15%\">\n                      <Button size='large' className={classes.button} onClick={() => terminateInstance(instance, instances[instance]['Public IP'])}>Stop</Button>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </div>\n      </>\n      :\n      null\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}