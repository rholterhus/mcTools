{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","title","margin","spacing","topRow","display","height","justifyContent","alignItems","middleRow","modalMain","backgroundColor","width","pointerEvents","modalContent","flexDirection","horizontalLine","input","button","fontSize","color","info","tableContainer","App","classes","useState","secretKey","setSecretKey","optionsModalOpen","setOptionsModalOpen","instances","setInstances","instanceType","setInstanceType","instanceLocation","setInstanceLocation","makeRequest","endpoint","data","a","requestOptions","method","headers","body","JSON","stringify","accessKeyId","secretAccessKey","fetch","response","json","Object","keys","length","instanceId","instanceIp","instance_id","instance_ip","console","log","className","TextField","size","id","label","variant","InputLabelProps","shrink","onChange","e","target","value","Button","onClick","getCurrentInfo","launchNewInstance","Modal","keepMounted","open","onClose","Select","MenuItem","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","instance","terminateInstance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9986bec.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport FormControl from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Modal from '@material-ui/core/Modal';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    margin: theme.spacing(1),\n  },\n  topRow: {\n    display: 'flex',\n    height: '75px',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  middleRow: {\n    display: 'flex',\n    height: '75px',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  modalMain: {\n    backgroundColor: 'rgb(0,0,0,0.25)',\n    display: 'flex',\n    height: '100%',\n    width: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n    pointerEvents: 'none', // so modal click close works\n  },\n  modalContent: {\n    backgroundColor: 'white',\n    display: 'flex',\n    height: '250px',\n    width: '250px',\n    justifyContent: 'center',\n    alignItems: 'center',\n    pointerEvents: 'auto', // so modal click close works\n    flexDirection: 'column'\n  },\n  horizontalLine: {\n    height: '1px',\n    width: '100%',\n    backgroundColor: 'black',\n    margin: '20px 20px 20px 20px'\n  },\n  input: {\n    margin: theme.spacing(1),\n  },\n  button: {\n    fontSize: 8,\n    margin: theme.spacing(1),\n    backgroundColor: 'blue',\n    color: 'white',\n    '&:hover': {\n      backgroundColor: 'black'\n    }\n  },\n  info: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  tableContainer: {\n    width: '80%'\n  }\n}));\n\n\n\nfunction App() {\n\n  const classes = useStyles();\n\n  const [secretKey, setSecretKey] = useState('');\n  const [optionsModalOpen, setOptionsModalOpen] = useState(false);\n  const [instances, setInstances] = useState('');\n  const [instanceType, setInstanceType] = useState('t2.large');\n  const [instanceLocation, setInstanceLocation] = useState('us-east-2');\n\n\n  async function makeRequest(endpoint, data) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          accessKeyId: 'AKIA4HDL62RVEJ4ZNRSW', \n          secretAccessKey: secretKey, \n          ...data\n        })\n    };\n    const response = await fetch(`https://minecraftbackend.herokuapp.com/${endpoint}`, requestOptions);\n    return response\n  }\n\n  async function getCurrentInfo() {\n    const data = await makeRequest('instances', {});\n    setInstances(data.json());\n  }\n\n  async function launchNewInstance() {\n    if (Object.keys(instances).length == 0) {\n      const data = await makeRequest('start-mc', {\n        instanceType: instanceType,\n        instanceLocation: instanceLocation,\n      });\n    }\n  }\n\n  async function terminateInstance(instanceId, instanceIp) {\n    const data = await makeRequest('terminate', {instance_id: instanceId, instance_ip: instanceIp});\n    console.log(data);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className={classes.title}> \n        Riley/Aquinn Minecraft Server Tool Website\n      </div>\n      <div className={classes.topRow}> \n        <TextField \n          size='small'\n          className={classes.input}\n          id=\"outlined-basic\" \n          label=\"SecretKey\" \n          variant=\"outlined\" \n          InputLabelProps={{\n              shrink: true,\n          }}\n          onChange={e => setSecretKey(e.target.value)}\n        />\n      </div>\n      <Button size='small' className={classes.button} onClick={() => getCurrentInfo()}>Get/Refresh</Button> \n      {instances ? \n      <>\t\n        {Object.keys(instances).length === 0 ? \n          <div className={classes.middleRow}> \n            <Button size='small' className={classes.button} onClick={() => setOptionsModalOpen(true)}>Instance Options</Button>\n            <Button size='small' className={classes.button} onClick={() => launchNewInstance()}>Launch New Instance</Button> \n            <Modal\n              keepMounted\n              open={optionsModalOpen}\n              onClose={() => setOptionsModalOpen(false)}\n            >\n              <div className={classes.modalMain}>\n                <div className={classes.modalContent}>\n                  <strong>Instance Type</strong>\n                  <FormControl>\n                    <Select value={instanceType} onChange={(e) => setInstanceType(e.target.value)}>\n                      <MenuItem value={\"t2.xlarge\"}>t2.xlarge (16 GB RAM)</MenuItem>\n                      <MenuItem value={\"t2.large\"}>t2.large (8 GB RAM)</MenuItem>\n                      <MenuItem value={\"t2.medium\"}>t2.medium (4 GB RAM)</MenuItem>\n                    </Select>\n                  </FormControl>\n                  <div className={classes.horizontalLine}/>\n                  <strong>Instance Location</strong>\n                  <FormControl>\n                    <Select value={instanceLocation} onChange={(e) => setInstanceLocation(e.target.value)}>\n                      <MenuItem value={\"us-east-2\"}>Ohio</MenuItem>\n                      <MenuItem value={\"eu-west-3\"}>Paris</MenuItem>\n                    </Select>\n                  </FormControl>\n                </div>\n              </div>\n            </Modal>\n          </div> \n          : \n          null\n        }\n        <div className={classes.info}>\n          <TableContainer className={classes.tableContainer} component={Paper}>\n            <Table >\n              <TableHead>\n                <TableRow>\n                  <TableCell width=\"20%\">ID</TableCell>\n                  <TableCell width=\"20%\">IP</TableCell>\n                  <TableCell width=\"20%\">Launch Time</TableCell>\n                  <TableCell width=\"10%\">Type</TableCell>\n                  <TableCell width=\"15%\">Backup</TableCell>\n                  <TableCell width=\"15%\">Stop</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {Object.keys(instances).map(instance => \n                  <TableRow key={instance}>\n                    <TableCell width=\"20%\">{instance}</TableCell>\n                    <TableCell width=\"20%\">{instances[instance]['Public IP']}</TableCell>\n                    <TableCell width=\"20%\">{instances[instance]['Launch Time']}</TableCell>\n                    <TableCell width=\"10%\">{instances[instance]['Type']}</TableCell>\n                    <TableCell width=\"15%\">\n                      <Button size='large' className={classes.button} onClick={() => {}}>Backup</Button>\n                    </TableCell>\n                    <TableCell width=\"15%\">\n                      <Button size='large' className={classes.button} onClick={() => terminateInstance(instance, instances[instance]['Public IP'])}>Stop</Button>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </div>\n      </>\n      :\n      null\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}